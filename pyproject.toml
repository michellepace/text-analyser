[project]
name = "text-analyser"
version = "0.1.0"
description = "A simple CLI tool to analyse text files (words, lines, characters)"
readme = "README.md"
authors = [
    { name = "Michelle", email = "" }
]
requires-python = ">=3.13"
dependencies = []

[project.scripts]
text-analyser = "text_analyser:analyse_file"

[build-system]
requires = ["uv_build>=0.8.4,<0.9.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "ruff>=0.12.7",
]

[tool.ruff]
# Strictest ruff settings
line-length = 88
target-version = "py313"

[tool.ruff.lint]
# Enable all available rules
select = ["ALL"]
# Only ignore rules that are incompatible or overly pedantic
ignore = [
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D203",    # 1 blank line required before class docstring (conflicts with D211)
    "D213",    # Multi-line docstring summary should start at the second line (conflicts with D212)
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "ISC001",  # Implicitly concatenated string literals on one line (conflicts with formatter)
    "T201",    # Print found (allow print statements)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # Use of assert detected
    "PLR2004", # Magic value used in comparison
    "D103",    # Missing docstring in public function
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.pyright]
# Cursor Pyright explanation:
#  Ruff is a linter, not a type checker, it recommends using one: https://docs.astral.sh/ruff/faq/
#  The Cursor Pyright extension (CP) is a replacement for Microsoft Pylance (proprietary to VSCode)
#  CP uses the Basedpyright language server (BP) (a fork of Pyright used by Microsoft Pylance)
#  CP v1.0.8+ sets BP to "standard" type checking mode when "[tool.pyright]" is present
#  BP has some linting-style rules that overlap with Ruff, causing duplicate errors

# Type checking mode (CP defaults to "standard" with pyproject.toml)
typeCheckingMode = "standard"

# Disable Basedpyright rules that duplicate Ruff as you go
reportUnusedImport = false      # Ruff F401 handles it
reportUnusedVariable = false    # Ruff F841
reportDuplicateImport = false   # Ruff F811